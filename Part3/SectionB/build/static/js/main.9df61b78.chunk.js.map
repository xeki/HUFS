{"version":3,"sources":["Part2/Part2e.js","App.js","serviceWorker.js","index.js"],"names":["displayMessage","props","error","messageText","console","log","className","messageDiv","document","createElement","innerHTML","querySelector","appendChild","setTimeout","removeChild","Display","persons","length","map","person","key","name","number","onClick","setPersons","setMessage","question","window","confirm","axios","delete","id","then","newPersons","filter","p","show","catch","deletePerson","Filter","type","value","filterText","onChange","filterPersons","AddPerson","newName","handleNameChange","newPhone","handlePhoneChange","addPersons","Phone","useState","setNewName","setNewPhone","setFilterText","filteredPersons","setFilteredPersons","useEffect","get","res","data","e","preventDefault","target","newFileredPersons","toLocaleLowerCase","includes","trim","newPerson","existedPerson","put","updatePerson","post","addPerson","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9df61b78.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport './Part2style.css'\r\n\r\nconst URL = '/api/persons';\r\n\r\nconst displayMessage = (props) => {\r\n  const {error, messageText} = props;\r\n  console.log('Message text: ', props)\r\n  const className = error ? 'error' : 'success';\r\n  const messageDiv = document.createElement('div');\r\n  messageDiv.innerHTML = `<div class=${className}>\r\n    ${messageText}\r\n  </div>`;\r\n  document.querySelector('#message').appendChild(messageDiv);\r\n  setTimeout(() => { console.log('Timeout')\r\n    // setMessage({error: null, messageText: '', show: false});\r\n    document.querySelector('#message').removeChild(messageDiv);\r\n  }, 4000);\r\n}\r\n\r\nconst deletePerson = (person, persons, setPersons, setMessage) => {\r\n  const question = `Delete ${person.name}?`;\r\n  const ans = window.confirm(question);\r\n  if (ans) {\r\n    axios.delete(`${URL}/${person.id}`)\r\n      .then(() => {\r\n        const newPersons = persons.filter(p => p.id !== person.id);\r\n        setPersons(newPersons);\r\n        setMessage({ error: false, messageText: `${person.name} information deleted successfully `, show: true});\r\n        displayMessage({ error: false, messageText: `${person.name} information deleted successfully `})\r\n      })\r\n      .catch(() => {\r\n        setMessage({ error: true, messageText: `Information of ${person.name} has already been removed`, show: true})\r\n        displayMessage({ error: true, messageText: `Information of ${person.name} has already been removed`});\r\n      })\r\n  }\r\n}\r\n\r\nconst addPerson = (person, persons, setPersons, setMessage) => {\r\n  axios.post(URL, person)\r\n    .then((res) => {\r\n      setPersons([...persons, res.data]);\r\n      setMessage({ error: false, messageText: `${person.name} added successfully`, show: true});\r\n      displayMessage({ error: false, messageText: `${person.name} added successfully`})\r\n    })\r\n    .catch(() => {\r\n      setMessage({ error: true, messageText: `Error adding ${person.name}`, show: true});\r\n      displayMessage({ error: true, messageText: `Error adding ${person.name}`, show: true});\r\n    })\r\n}\r\n\r\nconst updatePerson = (person, persons, setPersons, setMessage) => {\r\n  axios.put(`${URL}/${person.id}`, person)\r\n    .then(() => {\r\n      const newPersons = persons.map(p => p.name === person.name ? { ...p, ...person } : p);\r\n      setPersons(newPersons);\r\n      setMessage({ error: false, messageText: `${person.name} updated successfully`, show: true});\r\n      displayMessage({ error: false, messageText: `${person.name} updated successfully`});\r\n    })\r\n    .catch(() => {\r\n      setMessage({ error: true, messageText: `Error updating ${person.name}`, show: true});\r\n      displayMessage({ error: true, messageText: `Error updating ${person.name}`});\r\n    })\r\n}\r\n\r\nconst Display = (props) => props.persons.length ?\r\n  props.persons.map(person => <p key={person.name}>\r\n    {`${person.name} ${person.number}`} &nbsp;&nbsp;\r\n    <button key={`id-${person.name}`} onClick={() => deletePerson(person, props.persons, props.setPersons, props.setMessage)}>\r\n      Delete\r\n    </button>\r\n  </p>) : 'No contact to display'\r\n\r\nconst Filter = (props) => <div>filter by name: <input type=\"text\" name=\"filter_name\" value={props.filterText} onChange={props.filterPersons} /></div>\r\n\r\nconst AddPerson = (props) => (\r\n  <form>\r\n    <h2>Add new</h2>\r\n    <div>\r\n      <div>name: <input name=\"name\" value={props.newName} onChange={props.handleNameChange} /></div>\r\n      <div>number: <input name=\"number\" value={props.newPhone} onChange={props.handlePhoneChange} /></div>\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\" onClick={props.addPersons}>add</button>\r\n    </div>\r\n  </form>);\r\n\r\nconst Phone = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [newName, setNewName] = useState('');\r\n  const [newPhone, setNewPhone] = useState('');\r\n  const [filterText, setFilterText] = useState('');\r\n  const [filteredPersons, setFilteredPersons] = useState([]);\r\n  const [message, setMessage] = useState({error: null, messageText: '', show: false});\r\n\r\n  useEffect(() => {\r\n    axios.get(URL)\r\n      .then(res => setPersons(res.data))\r\n      .catch(e => setPersons([]))\r\n  }, []);\r\n\r\n  const filterPersons = (e) => {\r\n    e.preventDefault();\r\n    setFilterText(e.target.value);\r\n    const newFileredPersons = persons.filter(person =>\r\n      person.name.toLocaleLowerCase().includes(e.target.value.trim().toLocaleLowerCase())\r\n    );\r\n    setFilteredPersons(newFileredPersons);\r\n  }\r\n\r\n  const handlePhoneChange = (e) => {\r\n    e.preventDefault();\r\n    setNewPhone(e.target.value);\r\n  }\r\n\r\n  const handleNameChange = (e) => {\r\n    e.preventDefault();\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  const addPersons = (e) => {\r\n    e.preventDefault();\r\n    if (newName && newPhone) {\r\n      const newPerson = { name: newName, number: newPhone }\r\n      const existedPerson = persons.filter(person =>\r\n        person.name.toLocaleLowerCase() === newName.toLocaleLowerCase()\r\n      );\r\n      if (existedPerson.length) {\r\n        const ans = window.confirm(`${newName} already exists do you want\r\n         to replace the old number with the new one?`);\r\n        if (ans) {\r\n          updatePerson({ ...existedPerson[0], ...newPerson }, persons, setPersons, setMessage);\r\n          setNewName('');\r\n          setNewPhone('');\r\n        }\r\n      } else {\r\n        addPerson(newPerson, persons, setPersons, setMessage);\r\n        setNewName('');\r\n        setNewPhone('');\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div id='message'>\r\n        {/* {message.show && <Message error={message.error}  message={message.messageText} setMessage={setMessage} />} */}\r\n      </div>\r\n      <h2>Phonebook</h2>\r\n      <Filter filterText={filterText} filterPersons={filterPersons} />\r\n      <AddPerson\r\n        newName={newName}\r\n        newPhone={newPhone}\r\n        handleNameChange={handleNameChange}\r\n        handlePhoneChange={handlePhoneChange}\r\n        addPersons={addPersons}\r\n      />\r\n      <h2>Numbers</h2>\r\n      <Display persons={filterText.trim() ? filteredPersons : persons} setPersons={setPersons} setMessage={setMessage} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Phone;","import React from 'react';\nimport './App.css'\n\n// import Part from './Part2/Part2c'\n// import CountryPage from './Part2/CountryPage'\n// import Phone from './Part2/Part2dApi'\nimport Phone from './Part2/Part2e'\n\n// const App = () => <Part />;\n\n// const App = () => <CountryPage />;\n\nconst App = () => <Phone />\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}